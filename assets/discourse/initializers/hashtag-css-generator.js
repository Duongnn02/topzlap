define("discourse/initializers/hashtag-css-generator", ["exports", "discourse/lib/hashtag-autocomplete"], function (_exports, _hashtagAutocomplete) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  0; //eaimeta@70e063a35619d71f0,"discourse/lib/hashtag-autocomplete"eaimeta@70e063a35619d71f
  var _default = {
    name: "hashtag-css-generator",
    after: "category-color-css-generator",
    /**
     * This generates CSS classes for each hashtag type,
     * which are used to color the hashtag icons in the composer,
     * cooked posts, and the sidebar.
     *
     * Each type has its own corresponding class, which is registered
     * with the hastag type via api.registerHashtagType. The default
     * ones in core are CategoryHashtagType and TagHashtagType.
     */
    initialize(container) {
      this.site = container.lookup("service:site");

      // If the site is login_required and the user is anon there will be no categories
      // preloaded, so there will be no category color CSS variables generated by
      // the category-color-css-generator initializer.
      if (!this.site.categories) {
        return;
      }
      let generatedCssClasses = [];
      Object.values((0, _hashtagAutocomplete.getHashtagTypeClasses)()).forEach(hashtagTypeClass => {
        const hashtagType = new hashtagTypeClass(container);
        hashtagType.preloadedData.forEach(model => {
          generatedCssClasses = generatedCssClasses.concat(hashtagType.generateColorCssClasses(model));
        });
      });
      const cssTag = document.createElement("style");
      cssTag.type = "text/css";
      cssTag.id = "hashtag-css-generator";
      cssTag.innerHTML = generatedCssClasses.join("\n");
      document.head.appendChild(cssTag);
    }
  };
  _exports.default = _default;
});